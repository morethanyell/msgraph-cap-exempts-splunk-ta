{"basic_builder": {"appname": "TA-microsoft_azure_cap_exempted_users", "friendly_name": "Conditional Access Policy Exempted Users", "version": "2.0.0", "author": "morethanyell", "description": "Retrieves all users that are excluded from Conditional Access Policies", "theme": "#00d6ff", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABHpJREFUWEftlmlsVFUUx39naIcKShCIAq0NEtlUFAkSwRIiEIxsOvCBRKG0DCR1gUKUTewwgda0oIBCaou0htZCURQIiKmiQZQQxQiFKPsioQ0GgYKF2mXeMXdelzdttQmhhg9zPkwyb87c+3v/+z/nXAGUOygkDNTCaYQVasmuYYXCCtUrYMzQRv67y5mcRtF6HnIBEeajNup2cu7Y6kAugQgHgXNzVSSmN3rhBJi85sJSbq9C5ogimtnMbPTkaMjYCrNGob/tB2kmL/B/AAWV6Ytm7wWXG6kqhxlPo3+eb6pRPdAMH3iSYHsWrFvaNNGfA0+NhWVe2PcFdI2FnH1ArUfMy36/DZa/1lShu7sg6/ehnaKR61fQDp2QklNo0jCo/Ct0r3qgeZnQbxBEPwiennDTkRjbGzKLoKoSspdBUQHE9oFNxTBlIJRfsxetKIeK66FA4kbe/wrtNxhZ8zr6eSbieRlNXoX8VIQu8IDLcdkIATJG69cftuTCztwG8uQVEKiGoaNgw3uhQGOjoexyQ67TQzUW8lYuOmIyuNog8QPQ0hNIt15ofjFYAWRrJrp2vt0eTIQARbrh6AHwJED8EDshqh3sOA0zR8DyTZCzIhTo2a5QXtYUyCwcvxBNTIGaAHK5BPHHo6WnoftD4MtFOz8A7khk5Wx053q78kKA2kbBmnmw4xx44+BkMTwXD5MSYcYz8MmhUKCCYjh/CKxq+w3zsuDrgqCtZPgk1F8AxtBnf4VVcyDtY2TtQnROOjL/RayMT+GuewELmTsGPbw32ETtsjceMkCp0yFtI1y5BO8mQ/5+2LAadm9uCmQ8NHc8VNywS/jCKSj7A+n9RLCiZM9WOLIffj8GqQVoVEdcbydgLclHjh+EzIW2F4dPhL4DwDsELT3bDNCgkZBRCLPGwuptMK4nVP3dPNCYaLjW4CG5PwY++gGlLUyIAQ0gi7LRUVOC0EEgX15QUVmSgH5biNzXAy08ilw8g86McwC5oyBtetCAbDkGKrDnM1izwPZI4yPbWAxjusP1Kw0euqcjsngdOmwC4p8KJw8jXbqh46bB6JeQpVOxfDlI1lLk+M/ohTMwLhGdtgj5ZjOa/kot0JtZ4G4L/kR7ca8PklJg0iNw/oT9bPsRyF4Bu/KgR1/YcgRGdg1RqK5axOtDE31QXWl75Ms85OBeKD2D1tTA+Ono+JlgWRARgaxLQfPTgyraHjK9Rlz2eZto3wF69YdDpvnVxqODoeQsXL0ERs3HhsIv3wXLtz7qyt6MimEedPGHIJEQ5UbeeAE9UIQMGo2u3A4VVWBVIv4E9MddjaostF/e+jdnHzJQsQ/DO9vQzjG4Nq/Cyk1DvCno5GTk4jmY9zxacrJh2Lb6LFMFMzpSC9HH4+DmDWjXHjmwGzUeu3k1dMi2OlCd1toGmb0cnfgqUrgS/WBx6Mioy2sVoLoxYDZxXm4CFtJnIGp6kDPHaZDbDuRc3HmFNUf3b9HoWnR7L2i3Xg71/wwDtSRiWKGwQi0p0NLvd5yH/gFQUtOlTnnCdAAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.2.0", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "azure:aad:user:capexempts", "interval": "12400", "use_external_validation": true, "streaming_mode_xml": true, "name": "conditional_access_policy_exempted_users", "title": "Conditional Access Policy Exempted Users", "description": "Collects users who are directly exempted from Conditional Access Policies or exempted via group membership", "type": "customized", "parameters": [{"name": "policy_name", "label": "Policy Name", "help_string": "A valid RegEx patter to match policy names. A single period means retrieving everything.", "required": true, "format_type": "text", "default_value": ".", "placeholder": ".", "type": "text", "value": "Enforce\\sMFA\\sfrom\\sExternal$"}, {"name": "client_id", "label": "Client Id", "help_string": "", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": "account0"}, {"name": "tenant_id", "label": "Tenant Id", "help_string": "", "required": true, "format_type": "text", "default_value": "", "placeholder": "", "type": "text", "value": "e2ba81b8-03fe-407c-96a1-f4bc0f512e7d"}], "data_inputs_options": [{"type": "customized_var", "name": "policy_name", "title": "Policy Name", "description": "A valid RegEx patter to match policy names. A single period means retrieving everything.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": ".", "placeholder": "."}, {"type": "customized_var", "name": "client_id", "title": "Client Id", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "tenant_id", "title": "Tenant Id", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport requests\nimport json\nimport re\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # policy_name = definition.parameters.get('policy_name', None)\n    # client_id = definition.parameters.get('client_id', None)\n    # tenant_id = definition.parameters.get('tenant_id', None)\n    pass\n\ndef get_bearer_token(helper, client_id, client_secret, tenant_id):\n    \n    token_url = f'https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token'\n    \n    data = {\n        'grant_type': 'client_credentials',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'scope': 'https://graph.microsoft.com/.default'\n    }\n    \n    try:\n        \n        helper.log_info(\"Obtaining access token...\")\n        \n        response = requests.post(token_url, data=data)\n        response.raise_for_status()\n        token_info = response.json()\n        \n        helper.log_info(f\"Access token for client id {client_id} has been granted...\")\n        \n        return token_info['access_token']\n    except requests.RequestException as e:\n        helper.log_error(f\"Error obtaining token: {e}\")\n        return None\n\ndef get_conditional_access_policies(helper, access_token, policyNameRegex):\n    \n    graph_url = 'https://graph.microsoft.com/v1.0/'\n    conditional_policy_url = graph_url + 'identity/conditionalAccess/policies'\n    \n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n    \n    policies = []\n    policies_reduced = []\n    \n    helper.log_info(f'Retrieving Conditional Access Policies matching regex={policyNameRegex}')\n    \n    response = requests.get(conditional_policy_url, headers=headers)\n    \n    if response.status_code == 200:\n            \n        policies = response.json()\n        policies_reduced.extend(policies['value'])\n        \n        while '@odata.nextLink' in policies:\n            next_link = policies['@odata.nextLink']\n            response_next_page = requests.get(next_link, headers=headers)\n            if response_next_page.status_code == 200:\n                policies = response.json()\n                policies_reduced.extend(policies['value'])\n            else:\n                helper.log_error('Error occurred. status_code={str(response_next_page.status_code)} {response_next_page.text}')\n                break\n        \n        filtered_policies_reduced = [item for item in policies_reduced if re.search(policyNameRegex, item.get('displayName', ''), re.IGNORECASE)]\n        \n        return filtered_policies_reduced\n        \n        helper.log_info(f'All conditional access policies in cache. count={len(policies_reduced)}')\n            \n    else:\n        helper.log_error(f'Error occurred. status_code={str(response.status_code)} {response.text}')\n \ndef get_excluded_groups_from_cap(helper, policies):\n    \n    if policies is None: \n        helper.log_warning(f'Unable to retrieve excluded groups because policies list is empty.')\n        return\n    \n    groups = []\n    \n    for p in policies:\n        for g in p['conditions']['users']['excludeGroups']:\n            xg = {}\n            xg['policyId'] = p['id']\n            xg['policyDisplayName'] = p['displayName']\n            xg['policyState'] = p['state']\n            xg['policyLastModifiedDateTime'] = p['modifiedDateTime']\n            xg['excludedGroups'] = g\n            groups.append(xg)\n    \n    return groups\n    \ndef get_excluded_users_from_cap(helper, policies):\n    \n    if policies is None: \n        helper.log_warning(f'Unable to retrieve excluded users because policies list is empty.')\n        return\n    \n    users = []\n    \n    for p in policies:\n        for u in p['conditions']['users']['excludeUsers']:\n            xu = {}\n            xu['policyId'] = p['id']\n            xu['policyDisplayName'] = p['displayName']\n            xu['policyState'] = p['state']\n            xu['policyLastModifiedDateTime'] = p['modifiedDateTime']\n            xu['excludedUserMemberOf'] = \"null\"\n            xu['excludedUserState'] = \"Excluded from Policy Directly\"\n            xu['excludedUserId'] = u\n            users.append(xu)\n    \n    return users\n\ndef get_group_members(helper, access_token, group_id):\n    \n    graph_url = 'https://graph.microsoft.com/v1.0/'\n    group_members_url = graph_url + f'groups/{group_id}/members?$select=id'\n\n    headers = {\n        'Authorization': 'Bearer ' + access_token,\n        'Content-Type': 'application/json'\n    }\n\n    all_group_members_details = []\n    \n    helper.log_info(f\"Retrieving members of {group_id}\")\n\n    response = requests.get(group_members_url, headers=headers)\n    \n    page_counter = 1\n    \n    if response.status_code == 200:\n        group_members_details = response.json()\n        \n        all_group_members_details.extend(group_members_details['value'])\n        \n        while '@odata.nextLink' in group_members_details:\n            \n            page_counter = page_counter + 1\n            \n            if page_counter == 2:\n                print(f\"Group {group_id} has multiple pages.\")\n            \n            next_link = group_members_details['@odata.nextLink']\n            response = requests.get(next_link, headers=headers)\n            if response.status_code == 200:\n                group_members_details = response.json()\n                all_group_members_details.extend(group_members_details['value'])\n            else:\n                helper.log_error(f'Error occurred. Status={str(response.status_code)}', response.text)\n                continue\n        \n        if page_counter > 1:\n            helper.log_info(f\"Group {group_id} ended collecting all members at page {str(page_counter)}.\")\n        \n        return all_group_members_details\n\n    else:\n        helper.log_error(f'Error occurred. Status={str(response.status_code)}', response.text)\n\ndef collect_events(helper, ew):\n    \n    helper.log_info(f'Start of collection.')\n    \n    opt_global_account = helper.get_arg('client_id')\n    client_id = opt_global_account['username']\n    client_secret = opt_global_account['password']\n    tenant_id = helper.get_arg('tenant_id')\n    pattern = helper.get_arg('policy_name')\n    \n    llvl = helper.get_log_level()\n    helper.set_log_level(llvl)\n    helper.log_info(f\"Loging level is set to: {llvl}\")\n    \n    \n    token = get_bearer_token(helper, client_id, client_secret, tenant_id)\n    \n    meta_source = f\"ms_aad_user:tenant_id:{tenant_id}\"\n    \n    pols = get_conditional_access_policies(helper, token, pattern)\n    \n    helper.log_info(f'Conditional Access Policies (CAP) retrieved. Ingesting all matched CAP as separate sourcetype.')\n    \n    for p in pols:\n        data_event = json.dumps(p, separators=(',', ':'))\n        event = helper.new_event(source=meta_source, index=helper.get_output_index(), sourcetype='azure:aad:policy', data=data_event)\n        ew.write_event(event)\n    \n    helper.log_info(f'CAP ingested. Start of retrieving users. Firstly, all users who are directly excluded from CAP.')\n    \n    users = get_excluded_users_from_cap(helper, pols)\n    \n    if len(users) == 0:\n        helper.log_info(f'Did not find users who are directly excluded from CAP. Moving on to groups.')\n    else:\n        helper.log_info(f'All users directly excluded from CAP retrieved. Now ingesting users...')\n        \n        for u in users:\n            data_event = json.dumps(u, separators=(',', ':'))\n            event = helper.new_event(source=meta_source, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data_event)\n            ew.write_event(event)\n            \n        helper.log_info(f'All users directly excluded from CAP ingested. Start of retrieving groups excluded from CAP.')\n    \n    groups = get_excluded_groups_from_cap(helper, pols)\n    \n    if len(groups) == 0:\n        helper.log_info(f'Did not find groups in the CAP exclusion information. End of collection.')\n        return\n    \n    helper.log_info(f'All groups excluded from CAP retrieved. Now collecting members...')\n    \n    for g in groups:\n        \n        gid = g['excludedGroups']\n        members = get_group_members(helper, token, gid)\n        \n        helper.log_info(f'All members of CAP-exclusion group {gid} retrieved. Now ingesting users/members...')\n               \n        for m in members:\n            xu = {}\n            xu['policyId'] = g['policyId']\n            xu['policyDisplayName'] = g['policyDisplayName']\n            xu['policyState'] = g['policyState']\n            xu['policyLastModifiedDateTime'] = g['policyLastModifiedDateTime']\n            xu['excludedUserMemberOf'] = gid\n            xu['excludedUserState'] = \"Excluded from Policy via Group\"\n            xu['excludedUserId'] = m['id']\n            \n            data_event = json.dumps(xu, separators=(',', ':'))\n            event = helper.new_event(source=meta_source, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data_event)\n            ew.write_event(event)\n    \n    helper.log_info(f\"Ingestion of all users was successful. End of collection.\")\n    \n", "customized_options": [{"name": "policy_name", "value": "Enforce\\sMFA\\sfrom\\sExternal$"}, {"name": "client_id", "value": "account0"}, {"name": "tenant_id", "value": "e2ba81b8-03fe-407c-96a1-f4bc0f512e7d"}], "uuid": "a74e94eb4ac944b49513a43e33906b7d", "sample_count": 0}]}, "field_extraction_builder": {"azure:aad:user:capexempts": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"azure:aad:user:capexempts": {"metadata": {"event_count": 0, "data_input_name": "conditional_access_policy_exempted_users", "extractions_count": 0, "cims_count": 0}}, "azure:aad:policy": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started", "validation_id": "v_1720120083_89"}}